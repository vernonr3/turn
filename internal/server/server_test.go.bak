package server

import (
	"fmt"
	"net"
	"testing"

	"github.com/pion/stun"
	"github.com/pion/turn/v2/internal/ipnet"
)

func Test_HandleRequest_BadTurnShortData1(t *testing.T) {
	var mBuff = []byte("Hello World. This is a short data packet")
	// need to mock this
	mMockNetAddrImpl := NewMockNetAddr()
	mMockNetAddrImpl.IP = net.IP("127.0.0.1")
	mMockNetAddrImpl.Port = 5434
	mMockNetAddrImpl.Zone = ""
	mMockNetAddrImpl.handleString = func() string {
		return "127.0.0.1"
	}
	mSrcMockNetAddrImpl := NewMockNetAddr()
	mSrcMockNetAddrImpl.handleString = func() string {
		return "127.0.0.2"
	}
	mMockConnPacketImpl := NewMockPacketConnImpl()
	mMockConnPacketImpl.handleLocalAddr = func() net.Addr {
		mNewAddr := mSrcMockNetAddrImpl
		return mNewAddr
	}
	mLogging := NewLeveledLogger()
	mRequest := Request{
		Conn:    mMockConnPacketImpl,
		Buff:    mBuff,
		SrcAddr: mMockNetAddrImpl,
		Log:     mLogging,
	}
	err := HandleRequest(mRequest)
	if err != nil {
		fmt.Printf("Error %s\n", err.Error())
	}
}

// Note most tests of the stun message Decoding should be in the stun repository - not here
// we should simply test for pass / fail in order to exercise the code here.
func Test_HandleRequest_GoodTurnBindingRequest(t *testing.T) {
	m := stun.New()
	m.Type = stun.MessageType{Method: stun.MethodBinding, Class: stun.ClassRequest}
	m.TransactionID = stun.NewTransactionID()
	m.Add(stun.AttrErrorCode, []byte{0xff, 0xfe, 0xfa})
	m.WriteHeader()
	var mBuff = m.Raw
	mMockNetAddrImpl := makeMockNetAddr(t, "127.0.0.1:80")
	mSrcMockNetAddrImpl := makeMockNetAddr(t, "127.0.0.2:80")

	mMockConnPacketImpl := NewMockPacketConnImpl()
	mMockConnPacketImpl.handleLocalAddr = func() net.Addr {
		mNewAddr := mMockNetAddrImpl
		return mNewAddr
	}
	mLogging := NewLeveledLogger()
	mRequest := Request{
		Conn:    mMockConnPacketImpl,
		Buff:    mBuff,
		SrcAddr: mSrcMockNetAddrImpl,
		Log:     mLogging,
	}

	ipnet.SetUseTestingNetAddr(true)
	tests := []struct {
		supply Request
		want   error
	}{
		{supply: mRequest, want: nil},
	}
	for i, tt := range tests {
		t.Run(fmt.Sprint(i), func(t *testing.T) {
			if got := HandleRequest(tt.supply); got != tt.want {
				t.Errorf("got %s, want %v", got.Error(), tt.want)
			}
		})
	}
}
